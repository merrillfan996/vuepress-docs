import{_ as p,r as t,c as r,b as n,d as s,e as a,w as l,a as c,o as d}from"./app-C7ivEcUN.js";const u={},h=n("h2",{id:"数据类型分类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据类型分类"},[n("span",null,"数据类型分类")])],-1),k=n("h3",{id:"基本数据类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基本数据类型"},[n("span",null,"基本数据类型")])],-1),m={id:"number",tabindex:"-1"},v={class:"header-anchor",href:"#number"},g=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"介绍"),n("p",null,"Javascript是弱数据类型，赋值后才能判断")],-1),_=n("ul",null,[n("li",null,"整数"),n("li",null,"小数"),n("li",null,"负数")],-1),b={id:"string",tabindex:"-1"},f={class:"header-anchor",href:"#string"},j=c(`<h5 id="字符串含义" tabindex="-1"><a class="header-anchor" href="#字符串含义"><span>字符串含义</span></a></h5><p>字符串使用英文状态下的<code>&quot;</code> <code>&quot;</code>或<code>&#39;</code> <code>&#39;</code> 单引号和双引号可以相互嵌套，但注意不能自己嵌套自己</p><h5 id="字符串拼接" tabindex="-1"><a class="header-anchor" href="#字符串拼接"><span>字符串拼接</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;忍者&#39;</span><span class="token operator">+</span><span class="token string">&#39;神龟&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> comic <span class="token operator">=</span> <span class="token string">&#39;火影忍者&#39;</span></span>
<span class="line"><span class="token keyword">let</span> author <span class="token operator">=</span> <span class="token string">&#39;岸本齐史&#39;</span></span>
<span class="line">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>comic <span class="token operator">+</span> author<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="模板字符串" tabindex="-1"><a class="header-anchor" href="#模板字符串"><span>模板字符串</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> comic <span class="token operator">=</span> <span class="token string">&#39;火影忍者&#39;</span></span>
<span class="line"><span class="token keyword">let</span> author <span class="token operator">=</span> <span class="token string">&#39;岸本齐史&#39;</span></span>
<span class="line"></span>
<span class="line">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>comic<span class="token punctuation">}</span>的作者是$<span class="token punctuation">{</span>author<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),x={id:"boolean",tabindex:"-1"},y={class:"header-anchor",href:"#boolean"},w=c(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> isDarkMode <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1),B={id:"undefined",tabindex:"-1"},C={class:"header-anchor",href:"#undefined"},N=n("p",null,"只声明变量，未赋值",-1),T={id:"null",tabindex:"-1"},G={class:"header-anchor",href:"#null"},S=n("p",null,"声明并赋值，但为空",-1),V=n("h3",{id:"引用数据类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#引用数据类型"},[n("span",null,"引用数据类型")])],-1),I={id:"object",tabindex:"-1"},q={class:"header-anchor",href:"#object"},J={id:"function",tabindex:"-1"},$={class:"header-anchor",href:"#function"},D={id:"array",tabindex:"-1"},E={class:"header-anchor",href:"#array"},F=c(`<h2 id="检测数据类型" tabindex="-1"><a class="header-anchor" href="#检测数据类型"><span>检测数据类型</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型转换" tabindex="-1"><a class="header-anchor" href="#数据类型转换"><span>数据类型转换</span></a></h2><h3 id="隐式转换" tabindex="-1"><a class="header-anchor" href="#隐式转换"><span>隐式转换</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出number12</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>+</code>两边只要有一个字符串，都会把另外一个转成字符串 除了<code>+</code>以外的算术运算符，比如<code>-</code> <code>*</code> <code>/</code>等都会把数据转成数字类型</p><h3 id="显式转换" tabindex="-1"><a class="header-anchor" href="#显式转换"><span>显式转换</span></a></h3>`,7),M=n("div",{class:"language-javascript line-numbers-mode","data-highlighter":"prismjs","data-ext":"js","data-title":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"line"},[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"Number"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'10'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//保留整数")]),s(`
`),n("span",{class:"line"},[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"parseInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'12.88'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// 保留小数")]),s(`
`),n("span",{class:"line"},[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"parseFloat"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'12.88'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O=n("div",{class:"language-javascript","data-highlighter":"prismjs","data-ext":"js","data-title":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"line"},[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"String"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])])],-1);function P(R,U){const e=t("Badge"),o=t("CodeGroupItem"),i=t("CodeGroup");return d(),r("div",null,[h,k,n("h4",m,[n("a",v,[n("span",null,[s("number "),a(e,{text:"数字型",type:"tip"})])])]),g,_,n("h4",b,[n("a",f,[n("span",null,[s("string "),a(e,{text:"字符串型",type:"tip"})])])]),j,n("h4",x,[n("a",y,[n("span",null,[s("Boolean "),a(e,{text:"布尔型",type:"warning"})])])]),w,n("h4",B,[n("a",C,[n("span",null,[s("undefined "),a(e,{text:"未定义型",type:"danger"})])])]),N,n("h4",T,[n("a",G,[n("span",null,[s("null "),a(e,{text:"空",type:"warning"})])])]),S,V,n("h4",I,[n("a",q,[n("span",null,[s("object "),a(e,{text:"对象",type:"tip"})])])]),n("h4",J,[n("a",$,[n("span",null,[s("function "),a(e,{text:"函数",type:"danger"})])])]),n("h4",D,[n("a",E,[n("span",null,[s("array "),a(e,{text:"数组",color:"warning"})])])]),F,a(i,null,{default:l(()=>[a(o,{title:"数字型"},{default:l(()=>[M]),_:1}),a(o,{title:"字符型"},{default:l(()=>[O]),_:1})]),_:1})])}const A=p(u,[["render",P],["__file","dataType.html.vue"]]),H=JSON.parse('{"path":"/js/dataType.html","title":"数据类型","lang":"en-US","frontmatter":{"title":"数据类型"},"headers":[{"level":2,"title":"数据类型分类","slug":"数据类型分类","link":"#数据类型分类","children":[{"level":3,"title":"基本数据类型","slug":"基本数据类型","link":"#基本数据类型","children":[]},{"level":3,"title":"引用数据类型","slug":"引用数据类型","link":"#引用数据类型","children":[]}]},{"level":2,"title":"检测数据类型","slug":"检测数据类型","link":"#检测数据类型","children":[]},{"level":2,"title":"数据类型转换","slug":"数据类型转换","link":"#数据类型转换","children":[{"level":3,"title":"隐式转换","slug":"隐式转换","link":"#隐式转换","children":[]},{"level":3,"title":"显式转换","slug":"显式转换","link":"#显式转换","children":[]}]}],"git":{"updatedTime":1721205672000,"contributors":[{"name":"fanmei","email":"merrillfan@aliyun.com","commits":1}]},"filePathRelative":"js/dataType.md"}');export{A as comp,H as data};
