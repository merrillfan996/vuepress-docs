import{_ as t,c as e,o as d,a}from"./app-C7ivEcUN.js";const n={},s=a(`<h2 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h2><p>::: info 算术运算符优先级</p><p>先乘除取模后加减，有括号先算括号内的</p><p>:::</p><p><code>+</code>：求和</p><p><code>-</code>：求差</p><p><code>*</code>：求积</p><p><code>/</code>：求商</p><p><code>%</code>：取模</p><h2 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符"><span>赋值运算符</span></a></h2><div class="custom-container danger"><p class="custom-container-title">左值警告</p><p>赋值运算符是把右边的值赋予左边，这就要求左边必须是一个容器</p></div><div class="custom-container tip"><p class="custom-container-title">简写</p><p>+=</p><p>-=</p><p>*=</p><p>/=</p></div><h2 id="一元运算符" tabindex="-1"><a class="header-anchor" href="#一元运算符"><span>一元运算符</span></a></h2><p><code>++</code>：变量值加1</p><p><code>--</code>：变量值减1</p><p>前置：先自增后运算</p><p>后置：先运算后自增</p><div class="custom-container warning"><p class="custom-container-title">前置自增与后置自增</p><ul><li>独立使用二者并无差别</li><li>通常使用<kbd>i++</kbd></li></ul></div><h2 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符"><span>比较运算符</span></a></h2><p><code>&gt;</code>：左边是否大于右边</p><p><code>&lt;</code>：左边是否小于右边</p><p><code>&gt;=</code>：左边是否大于或等于右边</p><p><code>&gt;=</code>：左边是否小于或等于右边</p><p><code>==</code>：左右两边是否相等</p><p><code>===</code>：左右两边是否类型和值都相等</p><p><code>!==</code>：左右两边是否不全等</p><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h2><table><thead><tr><th>符号</th><th>名称</th><th>日常用法</th><th>特点</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与</td><td>并且</td><td>一假即假</td></tr><tr><td>||</td><td>逻辑或</td><td>或者</td><td>一真即真</td></tr><tr><td>!</td><td>逻辑非</td><td>取反</td><td>真变假</td></tr></tbody></table><h3 id="逻辑运算符短路" tabindex="-1"><a class="header-anchor" href="#逻辑运算符短路"><span>逻辑运算符短路</span></a></h3><table><thead><tr><th>符号</th><th>短路条件</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>左边为false就短路</td></tr><tr><td>||</td><td>左边为true就短路</td></tr></tbody></table><p>false、0、&#39; &#39;、undefined、null当假的看</p><h3 id="逻辑运算符中断" tabindex="-1"><a class="header-anchor" href="#逻辑运算符中断"><span>逻辑运算符中断</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入一个属：&#39;</span><span class="token punctuation">)</span></span>
<span class="line">num <span class="token operator">=</span> num <span class="token operator">||</span> <span class="token number">0</span>   <span class="token comment">//num逻辑运算符短路，赋值为0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符优先级" tabindex="-1"><a class="header-anchor" href="#运算符优先级"><span>运算符优先级</span></a></h2><table><thead><tr><th>优先级</th><th>运算符</th><th>顺序</th></tr></thead><tbody><tr><td>1</td><td>小括号</td><td>()</td></tr><tr><td>2</td><td>一元运算符</td><td><code>++</code> <code>--</code> ！</td></tr><tr><td>3</td><td>算数运算符</td><td>先*/%后+-</td></tr><tr><td>4</td><td>关系运算符</td><td>&gt; <code>&gt;=</code> &lt; <code>&lt;=</code></td></tr><tr><td>5</td><td>相等运算符</td><td>== <code>！=</code> === <code>！==</code></td></tr><tr><td>6</td><td>逻辑运算符</td><td>先<code>&amp;&amp;</code>后\`</td></tr><tr><td>7</td><td>赋值运算符</td><td>=</td></tr><tr><td>8</td><td>逗号运算符</td><td><code>,</code></td></tr></tbody></table>`,35),c=[s];function l(o,p){return d(),e("div",null,c)}const i=t(n,[["render",l],["__file","operator.html.vue"]]),h=JSON.parse('{"path":"/js/operator.html","title":"运算符","lang":"en-US","frontmatter":{"title":"运算符","author":"passwordgloo"},"headers":[{"level":2,"title":"算术运算符","slug":"算术运算符","link":"#算术运算符","children":[]},{"level":2,"title":"赋值运算符","slug":"赋值运算符","link":"#赋值运算符","children":[]},{"level":2,"title":"一元运算符","slug":"一元运算符","link":"#一元运算符","children":[]},{"level":2,"title":"比较运算符","slug":"比较运算符","link":"#比较运算符","children":[]},{"level":2,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[{"level":3,"title":"逻辑运算符短路","slug":"逻辑运算符短路","link":"#逻辑运算符短路","children":[]},{"level":3,"title":"逻辑运算符中断","slug":"逻辑运算符中断","link":"#逻辑运算符中断","children":[]}]},{"level":2,"title":"运算符优先级","slug":"运算符优先级","link":"#运算符优先级","children":[]}],"git":{"updatedTime":1721205672000,"contributors":[{"name":"fanmei","email":"merrillfan@aliyun.com","commits":1}]},"filePathRelative":"js/operator.md"}');export{i as comp,h as data};
